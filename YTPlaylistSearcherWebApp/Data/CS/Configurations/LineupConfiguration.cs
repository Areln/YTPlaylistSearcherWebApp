// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using YTPlaylistSearcherWebApp.Data.CS;
using YTPlaylistSearcherWebApp.Models.CS;

#nullable disable

namespace YTPlaylistSearcherWebApp.Data.CS.Configurations
{
    public partial class LineupConfiguration : IEntityTypeConfiguration<Lineup>
    {
        public void Configure(EntityTypeBuilder<Lineup> entity)
        {
            entity.ToTable("lineups");

            entity.HasIndex(e => e.GrenadeTypeId, "fk_lineups_grenade_types_idx");

            entity.HasIndex(e => e.MapId, "fk_lineups_maps_idx");

            entity.HasIndex(e => e.TeamId, "fk_lineups_teams_idx");

            entity.HasIndex(e => e.ThrowStyleTypeId, "fk_lineups_throw_styles_idx");

            entity.HasIndex(e => e.Id, "id_UNIQUE")
                .IsUnique();

            entity.HasIndex(e => e.Path, "path_UNIQUE")
                .IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");

            entity.Property(e => e.From)
                .HasMaxLength(45)
                .HasColumnName("from");

            entity.Property(e => e.GrenadeTypeId).HasColumnName("grenadeTypeID");

            entity.Property(e => e.MapId).HasColumnName("mapID");

            entity.Property(e => e.Path)
                .HasMaxLength(150)
                .HasColumnName("path")
                .UseCollation("utf8mb3_general_ci")
                .HasCharSet("utf8mb3");

            entity.Property(e => e.TeamId).HasColumnName("teamID");

            entity.Property(e => e.ThrowStyleTypeId).HasColumnName("throwStyleTypeID");

            entity.Property(e => e.To)
                .HasMaxLength(45)
                .HasColumnName("to");

            entity.HasOne(d => d.GrenadeType)
                .WithMany(p => p.Lineups)
                .HasForeignKey(d => d.GrenadeTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_lineups_grenade_types");

            entity.HasOne(d => d.Map)
                .WithMany(p => p.Lineups)
                .HasForeignKey(d => d.MapId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_lineups_maps");

            entity.HasOne(d => d.Team)
                .WithMany(p => p.Lineups)
                .HasForeignKey(d => d.TeamId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_lineups_teams");

            entity.HasOne(d => d.ThrowStyleType)
                .WithMany(p => p.Lineups)
                .HasForeignKey(d => d.ThrowStyleTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_lineups_throw_styles");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<Lineup> entity);
    }
}
