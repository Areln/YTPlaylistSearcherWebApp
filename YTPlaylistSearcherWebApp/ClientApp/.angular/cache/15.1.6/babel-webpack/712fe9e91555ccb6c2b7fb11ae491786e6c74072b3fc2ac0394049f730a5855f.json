{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { Component, Inject } from '@angular/core';\nlet TestComponent = class TestComponent {\n  constructor(http, baseUrl, formBuilder) {\n    this.isLoading = false;\n    this.http = http;\n    this.baseUrl = baseUrl;\n    this.formBuilder = formBuilder;\n    this.loadPlaylistForm = formBuilder.group({\n      playlistLink: ['https://www.youtube.com/playlist?list=PLNL_Z6NDFLJZafBMO4kA9PbNBq0t-f9hx']\n    });\n    this.resultSearchForm = formBuilder.group({\n      searchInput: ['']\n    });\n  }\n  getPlaylistLinkInput() {\n    return this.loadPlaylistForm.controls.playlistLink.value;\n  }\n  getSearchInput() {\n    return this.resultSearchForm.controls.searchInput.value;\n  }\n  PlaylistSubmit() {\n    var playlistID = this.getPlaylistLinkInput().includes('https://www.youtube.com/playlist?list=') ? this.loadPlaylistForm.controls.playlistLink.value.split('=')[1] : this.loadPlaylistForm.controls.playlistLink.value;\n    this.isLoading = true;\n    this.http.get(this.baseUrl + 'playlist/GetPlaylistFromYT?playlistID=' + playlistID).subscribe(result => {\n      this.playlist = result;\n      this.videosToDisplay = this.playlist.videos;\n      this.isLoading = false;\n      console.log(this.playlist);\n    }, error => {\n      console.error(error);\n      this.isLoading = false;\n    });\n  }\n  ResultsSearch() {\n    var searchString = this.getSearchInput().toLowerCase();\n    this.videosToDisplay = this.playlist.videos.filter(x => {\n      if (x.channelTitle != undefined) {\n        if (x.channelTitle.toLowerCase().includes(searchString)) {\n          return true;\n        }\n      }\n      if (x.title != undefined) {\n        if (x.title.toLowerCase().includes(searchString)) {\n          return true;\n        }\n      }\n      return false;\n    });\n  }\n};\nTestComponent = __decorate([Component({\n  selector: 'app-test',\n  templateUrl: './test.component.html',\n  styleUrls: ['./test.component.scss']\n}), __param(1, Inject('BASE_URL'))], TestComponent);\nexport { TestComponent };","map":{"version":3,"mappings":";AACA,SAASA,SAAS,EAAEC,MAAM,QAAQ,eAAe;AAS1C,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EAaxBC,YAAYC,IAAgB,EAAsBC,OAAe,EAAEC,WAAwB;IAP3F,cAAS,GAAY,KAAK;IAQxB,IAAI,CAACF,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,WAAW,GAAGA,WAAW;IAE9B,IAAI,CAACC,gBAAgB,GAAGD,WAAW,CAACE,KAAK,CAAC;MACxCC,YAAY,EAAE,CAAC,0EAA0E;KAC1F,CAAC;IAEF,IAAI,CAACC,gBAAgB,GAAGJ,WAAW,CAACE,KAAK,CAAC;MACxCG,WAAW,EAAE,CAAC,EAAE;KACjB,CAAC;EACJ;EAEOC,oBAAoB;IACzB,OAAO,IAAI,CAACL,gBAAgB,CAACM,QAAQ,CAACJ,YAAY,CAACK,KAAe;EACpE;EAEOC,cAAc;IACnB,OAAO,IAAI,CAACL,gBAAgB,CAACG,QAAQ,CAACF,WAAW,CAACG,KAAe;EACnE;EAEOE,cAAc;IACnB,IAAIC,UAAU,GAAG,IAAI,CAACL,oBAAoB,EAAE,CAACM,QAAQ,CAAC,wCAAwC,CAAC,GAAG,IAAI,CAACX,gBAAgB,CAACM,QAAQ,CAACJ,YAAY,CAACK,KAAK,CAACK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAACZ,gBAAgB,CAACM,QAAQ,CAACJ,YAAY,CAACK,KAAK;IACrN,IAAI,CAACM,SAAS,GAAG,IAAI;IAErB,IAAI,CAAChB,IAAI,CAACiB,GAAG,CAAc,IAAI,CAAChB,OAAO,GAAG,wCAAwC,GAAGY,UAAU,CAAC,CAACK,SAAS,CAACC,MAAM,IAAG;MAClH,IAAI,CAACC,QAAQ,GAAGD,MAAM;MACtB,IAAI,CAACE,eAAe,GAAG,IAAI,CAACD,QAAQ,CAACE,MAAM;MAC3C,IAAI,CAACN,SAAS,GAAG,KAAK;MACtBO,OAAO,CAACC,GAAG,CAAC,IAAI,CAACJ,QAAQ,CAAC;IAC5B,CAAC,EACCK,KAAK,IAAG;MACNF,OAAO,CAACE,KAAK,CAACA,KAAK,CAAC;MACpB,IAAI,CAACT,SAAS,GAAG,KAAK;IACxB,CAAC,CAAC;EACN;EAEOU,aAAa;IAClB,IAAIC,YAAY,GAAG,IAAI,CAAChB,cAAc,EAAE,CAACiB,WAAW,EAAE;IACtD,IAAI,CAACP,eAAe,GAAG,IAAI,CAACD,QAAQ,CAACE,MAAM,CAACO,MAAM,CAACC,CAAC,IAAG;MACrD,IAAIA,CAAC,CAACC,YAAY,IAAIC,SAAS,EAAE;QAC/B,IAAIF,CAAC,CAACC,YAAY,CAACH,WAAW,EAAE,CAACd,QAAQ,CAACa,YAAY,CAAC,EAAE;UACvD,OAAO,IAAI;;;MAGf,IAAIG,CAAC,CAACG,KAAK,IAAID,SAAS,EAAE;QACxB,IAAIF,CAAC,CAACG,KAAK,CAACL,WAAW,EAAE,CAACd,QAAQ,CAACa,YAAY,CAAC,EAAE;UAChD,OAAO,IAAI;;;MAGf,OAAO,KAAK;IACd,CAAC,CAAC;EACJ;CACD;AAnEY7B,aAAa,eALzBF,SAAS,CAAC;EACTsC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,EAc+BC,iBAAM,CAAC,UAAU,CAAC,IAbtCvC,aAAa,CAmEzB;SAnEYA,aAAa","names":["Component","Inject","TestComponent","constructor","http","baseUrl","formBuilder","loadPlaylistForm","group","playlistLink","resultSearchForm","searchInput","getPlaylistLinkInput","controls","value","getSearchInput","PlaylistSubmit","playlistID","includes","split","isLoading","get","subscribe","result","playlist","videosToDisplay","videos","console","log","error","ResultsSearch","searchString","toLowerCase","filter","x","channelTitle","undefined","title","selector","templateUrl","styleUrls","__param"],"sourceRoot":"","sources":["C:\\Users\\andaa\\source\\repos\\YTPlaylistSearcherWebApp\\YTPlaylistSearcherWebApp\\ClientApp\\src\\app\\test\\test.component.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Component, Inject } from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { PlaylistDTO, VideoDTO } from '../DTOs/PlaylistDTO';\r\n\r\n@Component({\r\n  selector: 'app-test',\r\n  templateUrl: './test.component.html',\r\n  styleUrls: ['./test.component.scss']\r\n})\r\nexport class TestComponent {\r\n\r\n  http!: HttpClient;\r\n  baseUrl!: string;\r\n  formBuilder!: FormBuilder;\r\n\r\n  isLoading: boolean = false;\r\n  errorMessage!: string;\r\n  loadPlaylistForm!: FormGroup;\r\n  resultSearchForm!: FormGroup;\r\n  playlist!: PlaylistDTO;\r\n  videosToDisplay!: VideoDTO[];\r\n\r\n  constructor(http: HttpClient, @Inject('BASE_URL') baseUrl: string, formBuilder: FormBuilder) {\r\n    this.http = http;\r\n    this.baseUrl = baseUrl;\r\n    this.formBuilder = formBuilder;\r\n\r\n    this.loadPlaylistForm = formBuilder.group({\r\n      playlistLink: ['https://www.youtube.com/playlist?list=PLNL_Z6NDFLJZafBMO4kA9PbNBq0t-f9hx'],\r\n    });\r\n\r\n    this.resultSearchForm = formBuilder.group({\r\n      searchInput: [''],\r\n    });\r\n  }\r\n\r\n  public getPlaylistLinkInput(): string {\r\n    return this.loadPlaylistForm.controls.playlistLink.value as string;\r\n  }\r\n\r\n  public getSearchInput(): string {\r\n    return this.resultSearchForm.controls.searchInput.value as string;\r\n  }\r\n\r\n  public PlaylistSubmit() {\r\n    var playlistID = this.getPlaylistLinkInput().includes('https://www.youtube.com/playlist?list=') ? this.loadPlaylistForm.controls.playlistLink.value.split('=')[1] : this.loadPlaylistForm.controls.playlistLink.value;\r\n    this.isLoading = true;\r\n\r\n    this.http.get<PlaylistDTO>(this.baseUrl + 'playlist/GetPlaylistFromYT?playlistID=' + playlistID).subscribe(result => {\r\n      this.playlist = result;\r\n      this.videosToDisplay = this.playlist.videos;\r\n      this.isLoading = false;\r\n      console.log(this.playlist);\r\n    },\r\n      error => {\r\n        console.error(error);\r\n        this.isLoading = false;\r\n      });\r\n  }\r\n\r\n  public ResultsSearch() {\r\n    var searchString = this.getSearchInput().toLowerCase();\r\n    this.videosToDisplay = this.playlist.videos.filter(x => {\r\n      if (x.channelTitle != undefined) {\r\n        if (x.channelTitle.toLowerCase().includes(searchString)) {\r\n          return true;\r\n        }\r\n      }\r\n      if (x.title != undefined) {\r\n        if (x.title.toLowerCase().includes(searchString)) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}